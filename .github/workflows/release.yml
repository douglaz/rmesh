name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-linux:
    name: Build Linux Static Binary
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Nix
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes
    
    - name: Build static musl binary
      run: |
        nix build
        cp result/bin/rmesh rmesh-linux-x86_64
        chmod +x rmesh-linux-x86_64
    
    - name: Verify static linking
      run: |
        file rmesh-linux-x86_64 | grep "statically linked"
        ldd rmesh-linux-x86_64 2>&1 | grep "not a dynamic executable" || true
    
    - name: Create tarball
      run: |
        mkdir -p linux-x86_64
        cp rmesh-linux-x86_64 linux-x86_64/rmesh
        tar czf rmesh-linux-x86_64.tar.gz linux-x86_64/
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: rmesh-linux-x86_64
        path: rmesh-linux-x86_64.tar.gz

  build-macos:
    name: Build macOS Binaries
    runs-on: macos-latest
    
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Build ${{ matrix.target }}
      run: |
        cargo build --release --target ${{ matrix.target }} -p rmesh
        cp target/${{ matrix.target }}/release/rmesh rmesh-${{ matrix.target }}
        chmod +x rmesh-${{ matrix.target }}
    
    - name: Create tarball
      run: |
        if [[ "${{ matrix.target }}" == "x86_64-apple-darwin" ]]; then
          mkdir -p macos-x86_64
          cp rmesh-${{ matrix.target }} macos-x86_64/rmesh
          tar czf rmesh-macos-x86_64.tar.gz macos-x86_64/
        else
          mkdir -p macos-aarch64
          cp rmesh-${{ matrix.target }} macos-aarch64/rmesh
          tar czf rmesh-macos-aarch64.tar.gz macos-aarch64/
        fi
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: rmesh-${{ matrix.target }}
        path: rmesh-*.tar.gz

  build-windows:
    name: Build Windows Binary
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-msvc
    
    - name: Build release binary
      run: |
        cargo build --release --target x86_64-pc-windows-msvc -p rmesh
        New-Item -ItemType Directory -Force -Path windows-x86_64
        Copy-Item target\x86_64-pc-windows-msvc\release\rmesh.exe windows-x86_64\rmesh.exe
    
    - name: Create zip archive
      run: |
        Compress-Archive -Path windows-x86_64 -DestinationPath rmesh-windows-x86_64.zip
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: rmesh-windows-x86_64
        path: rmesh-windows-x86_64.zip

  release:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Display structure of downloaded files
      run: ls -laR artifacts/
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/rmesh-linux-x86_64/*.tar.gz
          artifacts/rmesh-x86_64-apple-darwin/*.tar.gz
          artifacts/rmesh-aarch64-apple-darwin/*.tar.gz
          artifacts/rmesh-windows-x86_64/*.zip
          rmesh.sh
        draft: false
        prerelease: false
        generate_release_notes: true