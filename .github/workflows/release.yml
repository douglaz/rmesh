name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-linux:
    name: Build Linux Static Binary
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
      with:
        submodules: recursive
    
    - name: Install Nix
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes
    
    - name: Build static musl binary
      run: |
        nix build
        cp result/bin/meshtastic-cli meshtastic-cli-linux-x86_64
        chmod +x meshtastic-cli-linux-x86_64
    
    - name: Verify static linking
      run: |
        file meshtastic-cli-linux-x86_64 | grep "statically linked"
        ldd meshtastic-cli-linux-x86_64 2>&1 | grep "not a dynamic executable" || true
    
    - name: Create tarball
      run: |
        tar czf meshtastic-cli-linux-x86_64.tar.gz meshtastic-cli-linux-x86_64 README.md
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: meshtastic-cli-linux-x86_64
        path: meshtastic-cli-linux-x86_64.tar.gz

  build-macos:
    name: Build macOS Binaries
    runs-on: macos-latest
    
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    
    steps:
    - uses: actions/checkout@v5
      with:
        submodules: recursive
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Build ${{ matrix.target }}
      run: |
        cargo build --release --target ${{ matrix.target }} -p meshtastic-cli
        cp target/${{ matrix.target }}/release/meshtastic-cli meshtastic-cli-${{ matrix.target }}
        chmod +x meshtastic-cli-${{ matrix.target }}
    
    - name: Create tarball
      run: |
        tar czf meshtastic-cli-${{ matrix.target }}.tar.gz meshtastic-cli-${{ matrix.target }} README.md
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: meshtastic-cli-${{ matrix.target }}
        path: meshtastic-cli-${{ matrix.target }}.tar.gz

  build-windows:
    name: Build Windows Binary
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v5
      with:
        submodules: recursive
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-msvc
    
    - name: Build release binary
      run: |
        cargo build --release --target x86_64-pc-windows-msvc -p meshtastic-cli
        Copy-Item target\x86_64-pc-windows-msvc\release\meshtastic-cli.exe meshtastic-cli-windows-x86_64.exe
    
    - name: Create zip archive
      run: |
        Compress-Archive -Path meshtastic-cli-windows-x86_64.exe, README.md -DestinationPath meshtastic-cli-windows-x86_64.zip
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: meshtastic-cli-windows-x86_64
        path: meshtastic-cli-windows-x86_64.zip

  release:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Display structure of downloaded files
      run: ls -laR artifacts/
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/meshtastic-cli-linux-x86_64/*.tar.gz
          artifacts/meshtastic-cli-x86_64-apple-darwin/*.tar.gz
          artifacts/meshtastic-cli-aarch64-apple-darwin/*.tar.gz
          artifacts/meshtastic-cli-windows-x86_64/*.zip
        draft: false
        prerelease: false
        generate_release_notes: true