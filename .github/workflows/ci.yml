name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache target
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-target-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build
      run: cargo build --verbose
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Check formatting
      run: cargo fmt -- --check
      if: matrix.rust == 'stable'
    
    - name: Run clippy
      run: cargo clippy -- -D warnings
      if: matrix.rust == 'stable'

  build-release:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: meshtastic-cli-linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: meshtastic-cli-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: meshtastic-cli-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: meshtastic-cli-windows-x86_64.exe
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install musl tools (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools
    
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Strip binary (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        strip target/${{ matrix.target }}/release/meshtastic-cli
    
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          target/${{ matrix.target }}/release/meshtastic-cli
          target/${{ matrix.target }}/release/meshtastic-cli.exe

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin
    
    - name: Generate coverage
      run: cargo tarpaulin --out Xml --all-features
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./cobertura.xml
        fail_ci_if_error: false