#!/usr/bin/env bash
set -euo pipefail

echo "üîç Running pre-push checks..."
echo ""

# Check if we're in a nix environment
if command -v nix >/dev/null 2>&1 && [ -f "flake.nix" ]; then
    # Check formatting
    echo "üìù Checking code formatting..."
    if ! nix develop -c cargo fmt --check 2>/dev/null; then
        echo ""
        echo "‚ùå Code is not formatted. Please run 'nix develop -c cargo fmt' before pushing."
        echo ""
        echo "To see what needs formatting:"
        echo "  nix develop -c cargo fmt --check --verbose"
        exit 1
    fi
    echo "‚úÖ Formatting check passed"
    echo ""
    
    # Run clippy (without --all-features since Bluetooth requires dbus)
    echo "üîé Running clippy linting..."
    if ! nix develop -c cargo clippy --all-targets -- -D warnings 2>&1; then
        echo ""
        echo "‚ùå Clippy found issues. Please fix them before pushing."
        echo ""
        echo "To see all issues:"
        echo "  nix develop -c cargo clippy --all-targets"
        echo ""
        echo "To attempt automatic fixes:"
        echo "  nix develop -c cargo clippy --all-targets --fix --allow-dirty"
        exit 1
    fi
    echo "‚úÖ Clippy check passed"
    echo ""
    
    # Run tests
    echo "üß™ Running tests..."
    if ! nix develop -c cargo test --all 2>&1; then
        echo ""
        echo "‚ùå Tests failed. Please fix them before pushing."
        echo ""
        echo "To run tests with output:"
        echo "  nix develop -c cargo test --all -- --nocapture"
        exit 1
    fi
    echo "‚úÖ All tests passed"
    echo ""
    
    # Check for outdated dependencies (warning only)
    echo "üì¶ Checking for outdated dependencies..."
    if ! nix develop -c cargo outdated --exit-code 1 --root-deps-only 2>/dev/null; then
        echo ""
        echo "‚ö†Ô∏è  Warning: Outdated dependencies detected:"
        nix develop -c cargo outdated --root-deps-only 2>/dev/null | head -30
        echo ""
        echo "To update compatible versions:"
        echo "  nix develop -c cargo upgrade"
        echo ""
        echo "For incompatible updates (major versions), review changelog and update manually."
        echo "Consider updating dependencies when appropriate."
    else
        echo "‚úÖ All dependencies are up to date"
    fi
else
    # Fallback to regular cargo
    echo "üìù Checking code formatting..."
    if ! cargo fmt --check 2>/dev/null; then
        echo ""
        echo "‚ùå Code is not formatted. Please run 'cargo fmt' before pushing."
        echo ""
        echo "To see what needs formatting:"
        echo "  cargo fmt --check --verbose"
        exit 1
    fi
    echo "‚úÖ Formatting check passed"
    echo ""
    
    # Run clippy
    echo "üîé Running clippy linting..."
    if ! cargo clippy --all-targets -- -D warnings 2>&1; then
        echo ""
        echo "‚ùå Clippy found issues. Please fix them before pushing."
        echo ""
        echo "To see all issues:"
        echo "  cargo clippy --all-targets"
        echo ""
        echo "To attempt automatic fixes:"
        echo "  cargo clippy --all-targets --fix --allow-dirty"
        exit 1
    fi
    echo "‚úÖ Clippy check passed"
    echo ""
    
    # Run tests
    echo "üß™ Running tests..."
    if ! cargo test --all 2>&1; then
        echo ""
        echo "‚ùå Tests failed. Please fix them before pushing."
        echo ""
        echo "To run tests with output:"
        echo "  cargo test --all -- --nocapture"
        exit 1
    fi
    echo "‚úÖ All tests passed"
    echo ""
    
    # Check for outdated dependencies (non-nix fallback, warning only)
    echo "üì¶ Checking for outdated dependencies..."
    if command -v cargo-outdated >/dev/null 2>&1; then
        if ! cargo outdated --exit-code 1 --root-deps-only 2>/dev/null; then
            echo ""
            echo "‚ö†Ô∏è  Warning: Outdated dependencies detected:"
            cargo outdated --root-deps-only 2>/dev/null | head -30
            echo ""
            echo "To update compatible versions:"
            echo "  cargo upgrade"
            echo ""
            echo "For incompatible updates (major versions), review changelog and update manually."
            echo "Consider updating dependencies when appropriate."
        else
            echo "‚úÖ All dependencies are up to date"
        fi
    else
        echo "‚ö†Ô∏è  cargo-outdated not found. Skipping dependency check."
        echo "   Install with: cargo install cargo-outdated"
    fi
fi

echo ""
echo "‚úÖ All pre-push checks passed! Proceeding with push..."
echo ""